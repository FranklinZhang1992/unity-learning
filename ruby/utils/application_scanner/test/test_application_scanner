#!/usr/bin/ruby

SCRIPT_LOCATION = ARGV.shift

class TestError < RuntimeError ; end

module Process
    class Status
        def describe
            str = ''
            if signaled?
                str << 'signal ' << termsig.to_s
            elsif success?
                str << 'success'
            else
                str << 'exit ' << exitstatus.to_s
            end
            str << ' (with core)' if coredump?
            str
        end
    end
end

def trap_exit
    ['HUP', 'QUIT', 'INT', 'TERM'].each do |signal|
        trap(signal) { raise SystemExit.new(signal) }
    end
end

class Test

    TEST_BASE_DIR = "/tmp/test_app_scanner"
    STORAGE_POOL = "#{TEST_BASE_DIR}/test_storage_pool"
    SCAN_DIR = "#{TEST_BASE_DIR}/scan_dir"
    IMPORT_EXPORT_DIR = "#{TEST_BASE_DIR}/ix_dir"
    CHECK_DIR = "#{TEST_BASE_DIR}/check_dir"

    def exec_sys_cmd(cmd)
        puts ">> #{cmd}"
        IO.popen("#{cmd} 2>&1") do |io|
          while line = io.gets
            puts line.chomp
          end
        end
        raise TestError, "#{cmd} failed, #{$?.describe}" unless $?.success?
    end

    def write_to_file(path, content)
        File.open(path, "w+") do |f|
            f.puts content
        end
    end

    def before
        %x{mkdir -p #{STORAGE_POOL}}
        %x{mkdir -p #{SCAN_DIR}}
        %x{mkdir -p #{IMPORT_EXPORT_DIR}}
        %x{mkdir -p #{CHECK_DIR}}

        prepare_files_for_scan
    end

    def prepare_files_for_scan
        content = <<EOT
Name
photoshop
xxx

poperpoint

EOT
        write_to_file("#{SCAN_DIR}/hostA", content)

        content = <<EOT
Name
sublime
word

EOT
        write_to_file("#{SCAN_DIR}/hostB", content)

        content = <<EOT
chrome
sqlserver
windows

EOT
        write_to_file("#{SCAN_DIR}/hostC", content)
    end

    def test_scan
        exec_sys_cmd("#{SCRIPT_LOCATION} scan --pool=#{STORAGE_POOL} --location=#{SCAN_DIR} -v")
        exec_sys_cmd("#{SCRIPT_LOCATION} export --pool=#{STORAGE_POOL} -v")
    end
    def after
        %x{rm -rf #{TEST_BASE_DIR}}
    end
end

if __FILE__ == $0
    test = Test.new
    begin
        trap_exit
        methods = test.methods
        test.before if test.respond_to?(:before)
        methods.each do |method|
            next unless /test_/ =~ method
            begin
                test.send(method)
            rescue TestError => err
                puts "[Test fail] #{err}"
            end
        end
    rescue SystemExit => err
        exit 0
    rescue Exception => err
        puts "#{err} (#{err.class})\n#{err.backtrace.join("\n\tfrom ")}"
        exit 1
    else
        exit 0
    ensure
        test.after if test.respond_to?(:after)
    end
end
