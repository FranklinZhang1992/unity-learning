#!/usr/bin/ruby

require 'set'
require 'rexml/document'

$stdout.sync = true
$verbose = false

CMD_VALUE_REQUIRED_KEYS = %w{-input -output -auto-detect}
CMD_SINGLE_KEYS = %w{-v -overwrite}

def value_required_key?(param)
  return CMD_VALUE_REQUIRED_KEYS.to_set.include?(param)
end

def single_key?(param)
  return CMD_SINGLE_KEYS.to_set.include?(param)
end

def key?(param)
  return value_required_key?(param) || single_key?(param)
end

def log
  puts yield if $verbose
end

def log_warn
  msg = "[WARN] #{yield}"
  log {msg}
end

def log_debug
  msg = "[DEBUG] #{yield}"
  log {msg}
end

def log_error
  msg = "[ERROR] #{yield}"
  log {msg}
end

#
# Parse command arguments into a key-value map
#
def parse_cmd(params)
  cmd_hash = Hash.new
  cached_key = nil
  params.each do |param|
    current_param = param.chomp
    if cached_key
      if key?(current_param)
        raise "value if required for key #{cached_key}"
      else
        cmd_hash[cached_key] = current_param
        cached_key = nil
      end
    else
      if value_required_key?(current_param)
        cached_key = current_param
      elsif single_key?(current_param)
        cmd_hash[current_param] = true
      end
    end
  end # end of params block
  raise "value if required for key #{cached_key}" if cached_key
  cmd_hash
end

def do_html_to_xml(input, output, config = nil)
    html_to_xml = HtmlToXml.new(input, output)
    html_to_xml.load_config(config)
    html_to_xml.load
    html_to_xml.convert
    html_to_xml.write
end

class HtmlToXml
  include REXML
  attr_accessor :html_file
  attr_accessor :xml_file
  attr_accessor :html_content
  attr_accessor :xml_content
  attr_accessor :html_hash
  attr_accessor :xml_hash
  attr_accessor :config
  attr_accessor :html_file_name
  attr_accessor :xml_file_name

  HTML_REGEXP = Regexp.new('\S*[.]html', true)
  XML_REGEXP = Regexp.new('\S*[.]xml', true)
  HTML_SLICE_BEGIN_FLAG = "<dl>"
  HTML_SLICE_END_FLAG = "</dl>"

  def initialize(input, output)
    html?(input)
    xml?(output)
    self.html_file = input
    self.xml_file = output
    self.html_hash = Hash.new
    self.config = Hash.new
    self.xml_hash = Hash.new
  end

  def html?(file)
    raise "HTML file #{file} is required" if file.nil? || !File.exists?(file)
    raise "#{file} is not a HTML file" unless HTML_REGEXP.match(file)
  end

  def xml?(file)
    raise "XML file #{file} is required" if file.nil?
    raise "#{file} is not a XML file" unless XML_REGEXP.match(file)
  end

  def load_config(cmd_hash)
    self.config[:overwrite] = true unless cmd_hash["-overwrite"].nil?
  end

  #
  # Get the HTML slice from <dl> to </dl>, so that we can get a valid XML which only contains
  # I18N keys and values
  #
  def parse_html_str(orig_html_str)
    begin_index = orig_html_str.index(HTML_SLICE_BEGIN_FLAG)
    end_index = orig_html_str.index(HTML_SLICE_END_FLAG)
    return orig_html_str[begin_index, end_index - begin_index + HTML_SLICE_END_FLAG.length]
  end

  def load_html
    html_str = ""
    File.open(self.html_file) { |f|
      while line = f.gets
        html_str += "#{line}"
      end
    }
    html_str = parse_html_str(html_str)
    self.html_content = begin Document.new(html_str) rescue nil end
    raise "Failed to load HTML from #{self.html_file}" if self.html_content.nil?
  end

  def load_xml
    xml_str = ""
    if File.exist?(self.xml_file)
      File.open(self.xml_file) { |f|
        while line = f.gets
          xml_str += "#{line}"
        end
      }
    else
      xml_str = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
      xml_str += "<!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\">\n"
      xml_str += "<!--Copyright (C) 2007 Stratus Technologies Bermuda Ltd. All rights reserved-->\n"
      xml_str += "<!--Confidential and proprietary.-->\n"
      xml_str += "<properties>\n"
      xml_str += "\t<!-- Note, AUTHORIZATION_FAILED is not an AuditType -->\n"
      xml_str += "</properties>"
    end

    self.xml_content = begin Document.new(xml_str) rescue nil end
    self.xml_content.context[:attribute_quote] = :quote # Make sure all attributes are with double quotation marks
    raise "Failed to load XML from #{self.xml_file}" if self.xml_content.nil?
  end

  def load
    load_html
    load_xml
  end

  def convert_xml_to_hash
    nodes = self.xml_content.root
    nodes.elements.each do |node|
      key = begin node.attributes['key'] rescue nil end
      next if key.nil?
      if self.xml_hash.has_key?(key)
        log_warn {"Duplicate key #{key} found in XML #{self.xml_file}"}
        nodes.delete_element(node)
      else
        value = begin node.text rescue nil end
        self.xml_hash[key] = value
      end
    end # end of nodes block
  end

  def convert_html_str_to_hash
    cached_key = nil
    nodes = self.html_content.root
    nodes.elements.each do |node|
      case node.name
      when "dt"
        key = begin node.text rescue nil end
        log_warn {"Value expected for key #{cached_key}"} if cached_key
        log_warn {"Duplicate key #{key} found in source HTML #{self.html_file}"} unless self.html_hash[key].nil?
        cached_key = key
      when "dd"
        value = begin node.elements['code'].text rescue nil end
        value = value.gsub(/[\n\t]{1,}/, " ") # In case there is '\n' or '\t' in string
        log_warn {"Key expected for value #{value}"} unless cached_key
        self.html_hash[cached_key] = value
        cached_key = nil
      end
    end
  end

  def check_html_and_xml_before_merge
    html_key_count = self.html_hash.keys.length
    xml_key_count = self.xml_hash.keys.length
    log_debug {"#{html_key_count} keys detected from #{self.html_file}"}
    if File.exist?(self.xml_file)
      log_debug {"Target XML #{self.xml_file} already contains #{xml_key_count} keys"}
      self.xml_hash.each_key do |key|
        next if self.html_hash.has_key?(key)
        log_warn {"Key #{key} is missing in HTML file #{self.html_file}"}
      end # end of xml_hash block
      self.html_hash.each_key do |key|
        next if self.xml_hash.has_key?(key)
        log_warn {"Key #{key} is missing in XML file #{self.xml_file}"}
      end
    end
  end

  def merge_html_to_xml
    nodes = self.xml_content.root
    # Check if some keys already exist in XML, overwirte their values if '-overwrite' is specified
    nodes.elements.each do |node|
      key = begin node.attributes['key'] rescue nil end
      value = begin node.text rescue nil end
      if self.html_hash[key] && self.html_hash[key] != value
        node.text = self.html_hash[key] if self.config[:overwrite]
        self.html_hash.delete(key)
      end
    end
    self.html_hash.each_key do |key|
      entry = Element.new("entry")
      entry.add_attribute("key", key)
      entry.add_text("#{self.html_hash[key]}")
      nodes.add_element(entry)
    end
  end

  def convert
    convert_html_str_to_hash
    convert_xml_to_hash
    check_html_and_xml_before_merge
    merge_html_to_xml
  end

  def format(xml)
    output_str = "#{xml}"
    output_str = output_str.gsub(/\n<entry/, "\n\t<entry")
    output_str = output_str.gsub(/><entry/, ">\n\t<entry")
    output_str = output_str.gsub("><", ">\n<")
    output_str = output_str.gsub("&quot;", "\"")
    output_str = output_str.gsub("&apos;", "'")
    output_str = output_str.gsub("<?xml version='1.0' encoding='UTF-8'?>", "<?xml version=\"1.0\" encoding=\"UTF-8\"?>")
    output_str
  end

  def write
    final_xml = format(self.xml_content)
    file = File.new(self.xml_file, "w+")
    file.puts final_xml
    file.close
  end
end

class BundleHtmlScanner
  attr_accessor :root_path
  BUNDLE_PREFIX_REGEXP = Regexp.new('StringBundles_([a-z\-_]{1,})')

  def initialize(root_path)
    raise "not a valid root path #{root_path}" unless File.exists?(root_path)
    self.root_path = "#{root_path}/unity-help/help/FlareSources"
  end

  def get_bundle(bundle_folder)
    matched_str = BUNDLE_PREFIX_REGEXP.match(bundle_folder)
    return matched_str.nil? ? "UNKNOWN" : matched_str[1]
  end

  def detect_htmls
    audit_htmls = Hash.new
    bundle_folders = Dir.glob("#{self.root_path}/*")
    bundle_folders.each do |bundle_folder|
      if File.directory?(bundle_folder) 
        audit_html_file = "#{bundle_folder}/audit.html"
        if File.exists?(audit_html_file)
          bundle = get_bundle(bundle_folder)
          bundle = "en" if bundle == "en-us"
          log_debug {"Find source HTML file #{audit_html_file} for language bundle #{bundle}"}
          audit_htmls[bundle] = audit_html_file
        end
      end
    end # end of bundle_folders block
    audit_htmls
  end
end

#
# If '-auto-detect' is received by the script, then it will auto detect all HTML bundles under the
# folder specified and parse them to XML, otherwise user should specify the input HTML file and output
# XML file to do the parse.
#
begin
  params = ARGV
  cmd_hash = parse_cmd(params)
  $verbose = cmd_hash["-v"].nil? ? false : true
  if (cmd_hash["-auto-detect"])
    root_path = cmd_hash["-auto-detect"]
    bundle_html_scanner = BundleHtmlScanner.new(root_path)
    audit_htmls = bundle_html_scanner.detect_htmls
    audit_htmls.each_key do |bundle|
      input_file = audit_htmls[bundle]
      output_file = "#{root_path}/unity-mgmt/sm/java/smd-main/i18n/audit_#{bundle}.xml"
      log_debug {"==========Convert HTML to XML for language #{bundle} begin=========="}
      do_html_to_xml(input_file, output_file, cmd_hash)
      log_debug {"==========Convert HTML to XML for language #{bundle} end=========="}
    end # end of audit_htmls block
  else
    do_html_to_xml(cmd_hash["-input"], cmd_hash["-output"], cmd_hash)
  end
rescue Exception => e
  log_error {"#{e}"}
end
