#!/usr/bin/ruby

require 'optparse'
require 'singleton'
require 'logger'
require 'json'
require 'set'
require 'rexml/document'

$stdout.sync = true
$verbose = false

class Logger
    class Formatter
        def call(severity, time, progname, msg)
            "%s\n" % [msg2str(msg)]
        end
    end
end

def log
    $logger ||= begin
        Logger.new(STDOUT)
    end
    $logger.level = $verbose ? Logger::DEBUG : Logger::INFO
    $logger
end

class CommandError < RuntimeError ; end

class BaseHandler
    include REXML

    HTML_SLICE_BEGIN_FLAG = "<body>"
    HTML_SLICE_END_FLAG = "</body>"
    XML_VERSION_ENCODING = "<?xml version='1.0' encoding='utf-8'?>\n"

    def initialize(options)
        @options = options.nil? ? {} : options
        @input_file_name = @options[:input]
        @output_file_name = @options[:output]
        raise CommandError, "No such file or directory #{@input_file_name}." \
          unless File::exist?(@input_file_name)
    end

    def handle
        raise CommandError, "No implementation for this command."
    end

    def extract_xml_slice_from_html

        html_string = IO.read(@input_file_name)

        ns = html_string.slice(/<html.*?>/im)

        html_slice_begin_index = html_string.index(HTML_SLICE_BEGIN_FLAG)
        raise CommandError, "The flag #{HTML_SLICE_BEGIN_FLAG} is not found." \
          if html_slice_begin_index.nil?

        html_slice_end_index = html_string.index(HTML_SLICE_END_FLAG)
        raise CommandError, "The flag #{HTML_SLICE_END_FLAG} is not found." \
          if html_slice_begin_index.nil?

        html_slice_end_index += HTML_SLICE_END_FLAG.length
        xml_string = XML_VERSION_ENCODING + html_string[(html_slice_begin_index...html_slice_end_index)]
        ns.gsub!("html", HTML_SLICE_BEGIN_FLAG.delete("<>")) unless ns.nil?
        xml_string.gsub!(HTML_SLICE_BEGIN_FLAG, ns) unless ns.nil?
        return xml_doc = Document.new(xml_string)
    end
end

class HtmlToJsonHandler < BaseHandler

    def handle
        xml_doc = extract_xml_slice_from_html
        hash = parse_xml_to_hash(xml_doc)
        writing_to_file(hash)
    end

    def parse_xml_to_hash(xmldoc)

        raise CommandError, "The xml DOC is empty!" if xmldoc.nil?
        #get root element
        root = xmldoc.root
        dt_elememts = root.get_elements("//dt")
        raise CommandError, "The dt elememts is not found." if dt_elememts.nil?

        hash = Hash.new
        dt_elememts.each do |dt_elememt|
            dt_elememt_text = dt_elememt.text
            next if dt_elememt_text.nil?
            if !hash.nil? && hash.has_key?(dt_elememt_text)
               log.warn("The key \"#{dt_elememt_text}\" is repeated.")
            end

            temp_elememt = dt_elememt.next_element
            code_elements = temp_elememt.get_elements("./code") \
              if !temp_elememt.nil? && temp_elememt.name == "dd"
            code_elememt_text = get_elememt_text(code_elements[0]) unless code_elements.nil?
            if code_elememt_text.nil? || code_elememt_text.empty?
               log.warn("The value of the key \"#{dt_elememt_text}\" is not found.")
               next
            end

            hash[dt_elememt_text] = code_elememt_text
        end
        return hash
    end

    def get_elememt_text(elememt)

        return if elememt.nil?
        elememt_text = elememt.to_s
        return elememt_text.gsub("<code>", "").gsub("</code>", "").gsub("<code/>", "")
    end

    def writing_to_file(hash)

        File.open(@output_file_name, "w+") do |f|
           f.write(hash.to_json)
        end
    end
end

class CommandHandler
    include Singleton

    MANDATORY_OPTIONS = %w{--input --output}

    def initialize
        @options = {}
    end

    def parse(args)
        raise CommandError, "No option is specified" if args.nil? || args.empty?

        received_opts = []
        opt_parser = OptionParser.new do |opts|

            help_msg = "This is a script for converting HTML file to json file\
                        \nUsage: i18n_helper.rb --input INPUT_FILE --output OUTPUT_FILE"

            opts.banner = help_msg
            opts.separator ""
            opts.separator "Specific options:"

            opts.on('-i', '--input INPUT_FILE', 'The file to be converted, should be in HTML format') do |value|
                @options[:input] = value
                received_opts << "--input"
            end
            opts.on('-o', '--output OUTPUT_FILE', 'The file to be written') do |value|
                @options[:output] = value
                received_opts << "--output"
            end
            opts.on('-f', '--output-format FORMAT', 'The output format (default is json)') do |value|
                @options[:output_format] = value
                received_opts << "--output-format"
            end
            opts.on("-h", "--help", "Prints this help") do
                puts opts
                exit
            end
        end

        opt_parser.order!
        mandatory_options_check(received_opts)
        @options
    end

    def mandatory_options_check(received_opts)
        MANDATORY_OPTIONS.each do |mandatory_opt|
            raise CommandError, "Missing mandatory option #{mandatory_opt}" unless received_opts.include?(mandatory_opt)
        end
    end

    HANDLE_CLASS_HASH = {
        "json" => HtmlToJsonHandler
    }

    def upper_case(str)
        str.gsub(/\b\w/) { $&.upcase }
    end

    def get_handle_class(output_format)
        output_format = "json" if output_format.nil?
        handle_class_name = "HtmlTo#{upper_case(output_format)}Handler"
        HANDLE_CLASS_HASH[output_format]
    end

    def handle(options)
        handle_class = get_handle_class(options[:output_format])
        if handle_class.nil?
            raise CommandError, "Unsupported output format #{options[:output_format]}"
        else
            handle_class.new(options).handle
        end
    end
end

if __FILE__ == $0
    begin
        options = CommandHandler.instance.parse(ARGV)
        CommandHandler.instance.handle(options)
    rescue SystemExit => err
        exit(0)
    rescue CommandError => err
        log.error("#{err}")
        exit(1)
    rescue Exception => err
        log.error("#{err} (#{err.class})\n#{err.backtrace.join("\n\tfrom ")}")
        exit(2)
    else
        exit(0)
    end
end
