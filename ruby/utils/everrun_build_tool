#!/usr/bin/ruby

#=============================================================================

# Use example:
# ./unity_everrun_build {workspace_path} {dut_name} {version}
#                             $1             $2        $3
#                       shanghai_build     greece     current/7.4.0.0-145

#=============================================================================

# This script is used to do the complete build for everrun.

#=============================================================================

$stdout.sync = true

$WORKSPACE_PATH = ARGV[0].to_s
$DUT_NAME = ARGV[1].to_s
$VERSION = ARGV[2].to_s
$USER_NAME = %x{whoami}

class Main
  attr_accessor :workspace_path
  attr_accessor :dut_name
  attr_accessor :version
  attr_accessor :user_name
  attr_accessor :source_folder
  def initialize
    self.workspace_path = "#{$WORKSPACE_PATH}"
    self.dut_name = "#{$DUT_NAME}"
    self.user_name = "#{$USER_NAME}"
    self.version = "#{$VERSION}"
    prepare_params
    check_params
    init_source_folder
    show_params
  end
  DUT_RESERVER_REGEXP = "Reserved: ([a-zA-Z]{1,})[ ]"
  EVERRUN_73_VERSION_REGEXP = Regexp.new('7[.]3[.][0-9][.][0-9]-[0-9]{1,}')
  EVERRUN_74_VERSION_REGEXP = Regexp.new('7[.]4[.][0-9][.][0-9]-([0-9]{1,})')
  def everrun_73_version_re() EVERRUN_73_VERSION_REGEXP end
  def everrun_74_version_re() EVERRUN_74_VERSION_REGEXP end
  def deploy_folder() "/test_logs1/#{self.user_name}/#{self.workspace_path}" end
  def backup_folder() "/test_logs1/#{self.user_name}/#{self.workspace_path}.backup" end
  def show_params
    puts "Received params: workspace path = #{self.workspace_path}, dut name = #{self.dut_name}, version = #{self.version}, user name = #{self.user_name}"
  end
  def check_params
    if self.workspace_path == "" || self.dut_name == "" || self.version == ""
      raise "Please input the parameters!"
    end
  end
  def prepare_params
    self.user_name.chomp!
    self.workspace_path.chomp!
    self.dut_name.chomp!
    self.version.chomp!
  end
  def check_dut_available
    puts "===================begin to check dut available========================"
    rinfo_message = %x{rinfo | grep "^#{self.dut_name} *[0-9]*%"}
    dut_reserver_regexp = "Reserved: (#{self.user_name})[ ]"
    if rinfo_message.nil?
      raise "The dut #{self.dut_name} does not exist!"
    elsif rinfo_message.match(dut_reserver_regexp)
      puts "The dut is reserved by #{self.user_name}"
    else
      raise "Only the dut is reserved by yourself, then you can build everrun to it, but the dut #{self.dut_name} is: \n#{rinfo_message}"
    end
  end
  def verify_access
    puts "===================begin to verify the access========================"
    begin
      timeout(10) {%x{ftssh #{self.dut_name}}}
    rescue => e
      raise "Cannot access build server, #{e}"
    end
    puts "===================verified successfully========================"
  end
  def init_source_folder
    if self.version.match(everrun_73_version_re)
      self.source_folder = "/test_logs/fttest2/unity-7.3/builds/#{self.version}"
    elsif self.version.match(everrun_74_version_re)
      self.source_folder = "/test_logs/fttest2/unity-7.4/builds/#{self.version}"
    elsif self.version == "current"
      builds = Dir.glob("/test_logs/fttest2/unity-7.4/builds/*")
      max_release_num = 0
      current_version = nil
      builds.each do |file|
        if File.directory?(file)
          match_result = file.match(everrun_74_version_re)
          unless match_result.nil?
            release_num = begin match_result[1].to_i rescue 0 end
            if release_num >= max_release_num
              max_release_num = release_num
              current_version = match_result
            end
          end
        end
      end # end of builds block
      raise "no current version is found" if current_version.nil?
      puts "current version is #{current_version}"
      self.version = current_version
      self.source_folder = "/test_logs/fttest2/unity-7.4/builds/#{self.version}"
    else
      raise "Unsupported version #{self.version}, valid version should be like: 7.4.0.0-145"
    end
  end
  def source_code_exist?
    workspace = "/developer/#{self.user_name}/#{self.workspace_path}"
    if File.exist?(workspace)
      return true
    else
      return false
    end
  end
  def copy_source_kit
    puts "===================begin to copy source kit of everrun from test_logs========================"
    dest_folder = "/developer/#{self.user_name}/#{self.workspace_path}"
    %x{mkdir -p #{dest_folder}}
    cpy_cmd = "cp -rv #{self.source_folder} #{dest_folder}/"
    IO.popen(cpy_cmd) { |io|
      while line = io.gets
        line.chomp!
        puts line
      end
    }
    puts "===================copy successfully========================"
  end
  def ready_to_run_fttest?
    local_file = "#{deploy_folder}/local"
    project_file = "#{deploy_folder}/project"
    if File.exist?(deploy_folder) && File.exist?(local_file) && File.exist?(project_file)
      return true
    else
      return false
    end
  end
  def prepare_fttest_folder
    puts "===================prepare to run fttest========================"
    %x{mkdir -p #{deploy_folder}}
    %x{ln -s /test_logs/fttest2/unity/current #{deploy_folder}/project}
    %x{ln -s /developer/#{self.user_name}/#{self.workspace_path}/#{self.version} #{deploy_folder}/local}
    puts "===================prepare finished======================="
  end
  def fttest_success?(dut_name)
    %x{curl http://#{dut_name}.sn.stratus.com}
    return $?.success?
  end
  def backup_origin_log
    puts "copy original log files to #{backup_folder}"
    %x{cp -rv #{deploy_folder}/sn/* #{backup_folder}}
  end
  def run_fttest
    puts "===================begin to run fttest========================"
    run_fttest_cmd = "/developer/#{self.user_name}/script/common/run_fttest #{deploy_folder} #{self.dut_name}"
    IO.popen(run_fttest_cmd) { |io|
      while line = io.gets
        line.chomp!
        puts line
      end
    }
    puts "===================deploy finished======================="
  end
  def run
    # verify_access
    if source_code_exist?
      puts "source code already exists"
    else
      copy_source_kit
    end
    if ready_to_run_fttest?
      puts "already ready to run fttest"
    else
      prepare_fttest_folder
    end
    run_fttest
    if !fttest_success?(self.dut_name)
      puts "fttest failed, try for a second time"
      backup_origin_log
      run_fttest
    end
  end
end

begin
  main = Main.new
  main.run
rescue Exception => e
  puts "Error occured during executing build => #{e}"
  raise
end
