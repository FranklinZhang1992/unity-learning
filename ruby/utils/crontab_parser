#!/usr/bin/ruby

require 'set'
require 'date'
require 'optparse'
require 'rexml/document'

$options = {}

class InvalidCrontabError < RuntimeError ; end

class AbstractCrontabField
    attr :field_str
    attr :field_arr

    def initialize(field_str, field_arr)
        @field_str = field_str
        case field_arr
        when Array
            @field_arr = field_arr
        else
            raise ArgumentError, "invalid array is received"
        end
    end

    def to_s
        "#{self.field_str}"
    end
end

class CrontabMinuteField < AbstractCrontabField
    MIN = 0
    MAX = 59
    FIELD = "minute"
    def initialize(field_str, field_arr)
        super(field_str, field_arr)
    end
end

class CrontabHourField < AbstractCrontabField
    MIN = 0
    MAX = 23
    FIELD = "hour"
    def initialize(field_str, field_arr)
        super(field_str, field_arr)
    end
end

class CrontabDayField < AbstractCrontabField
    MIN = 1
    MAX = 31
    FIELD = "day of month"
    def initialize(field_str, field_arr)
        super(field_str, field_arr)
    end
end

class CrontabMonthField < AbstractCrontabField
    MIN = 1
    MAX = 12
    FIELD = "month"
    def initialize(field_str, field_arr)
        super(field_str, field_arr)
    end
end

class CrontabWeekdayField < AbstractCrontabField
    MIN = 0
    MAX = 7
    FIELD = "day of week"
    def initialize(field_str, field_arr)
        if field_arr.include?(7)
            field_arr.delete(7)
            unless field_arr.include?(0)
                field_arr << 0
                field_arr.sort!
            end
        end
        super(field_str, field_arr)
    end
end

class InternalTime
    attr_accessor :year, :month, :day, :hour, :min

    def initialize(time)
        @year = time.year
        @month = time.month
        @day = time.day
        @hour = time.hour
        @min = time.min
    end

    def to_time
        Time.local(@year, @month, @day, @hour, @min, 0)
    end

    def inspect
        [year, month, day, hour, min].inspect
    end
end

class CrontabParserBase
    def self.attr_cfg(symbol)
        define_method(symbol) {
            instance_variable_get("@#{symbol}")
        }
        define_method("#{symbol}=") { |value|
            property_setter(symbol, value)
        }
    end
    def self.cron_attr(*symbols)
        symbols.each do |symbol|
            self.attr_cfg(symbol)
        end
    end
end

class CrontabParser < CrontabParserBase

    cron_attr :minute, :hour, :day, :month, :weekday

    MINUTE_INDEX = 0
    HOUR_INDEX = 1
    DAY_INDEX = 2
    MONTH_INDEX = 3
    WEEKDAY_INDEX = 4

    CRONTAB_FIELD_REGEXP = Regexp.new('^(\d+)(-(\d+)(/(\d+))?)?$')
    CRONTAB_FIELD_START_GROUP_NUM = 1
    CRONTAB_FIELD_STOP_GROUP_NUM = 3
    CRONTAB_FIELD_STEP_GROUP_NUM = 5


    def initialize(str)
        case str
        when String
            fields = str.split(/\s+/)
            length = fields.length
            raise InvalidCrontabError, "#{str} does not match crontab trigger pattern" unless length == 5
            self.minute = fields[MINUTE_INDEX]
            self.hour = fields[HOUR_INDEX]
            self.day = fields[DAY_INDEX]
            self.month = fields[MONTH_INDEX]
            self.weekday = fields[WEEKDAY_INDEX]
        else
            raise ArgumentError, "invalid string is received"
        end
    end

    CRONTAB_FIELD_CLASS_TABLE = {
        :minute => CrontabMinuteField,
        :hour => CrontabHourField,
        :day => CrontabDayField,
        :month => CrontabMonthField,
        :weekday => CrontabWeekdayField
    }

    def get_field_class(field)
        CRONTAB_FIELD_CLASS_TABLE[field]
    end

    def property_setter(symbol, value)
        min = get_field_class(symbol)::MIN
        max = get_field_class(symbol)::MAX
        max_range = min..max
        converted_value = value.gsub(/^\*/, "#{min}-#{max}")
        field_arr = converted_value.split(',').map do |sub_val|
            matched = CRONTAB_FIELD_REGEXP.match(sub_val)
            if matched
                start = matched[CRONTAB_FIELD_START_GROUP_NUM]
                stop = matched[CRONTAB_FIELD_STOP_GROUP_NUM]
                step = matched[CRONTAB_FIELD_STEP_GROUP_NUM]
                start = start.to_i
                stop = stop.nil? ? start : stop.to_i
                step = step.nil? ? 1 : step.to_i
                unless range_check(start, stop, step, max_range)
                    raise InvalidCrontabError, "invalid #{symbol} field => #{value}"
                end
                stepped_range(start..stop, step)
            else
                raise InvalidCrontabError, "invalid #{symbol} field => #{value}"
            end
        end.flatten.to_set.to_a.sort

        instance_variable_set("@#{symbol}", get_field_class(symbol).new(value, field_arr))
    end

    def range_check(start, stop, step, max_range)
        max_range.include?(start) && max_range.include?(stop) && max_range.include?(step) ? true : false
    end

    def stepped_range(allowed_range, step)
        last = allowed_range.last
        first = allowed_range.first

        return [first] if first == last && step == 1
        len = last - first

        num = len.div(step)
        result = (0..num).map { |i| first + step * i }

        result.pop if result[-1] == last and allowed_range.exclude_end?
        result
    end

    def next
        t = InternalTime.new(Time.now)

        unless self.month.field_arr.include?(t.month)
            nudge_month(t)
            t.day = 0
        end

        unless interpolate_weekdays(t.year, t.month).include?(t.day)
            nudge_date(t)
            t.hour = -1
        end

        unless self.hour.field_arr.include?(t.hour)
            nudge_hour(t)
            t.min = -1
        end

        # always nudge the minute
        nudge_minute(t)
        t = t.to_time
        t
    end

    # returns a list of days which do both match self.day or self.weekday
    def interpolate_weekdays(year, month)
        @_interpolate_weekdays_cache ||= {}
        @_interpolate_weekdays_cache["#{year}-#{month}"] ||= interpolate_weekdays_without_cache(year, month)
    end

    def interpolate_weekdays_without_cache(year, month)
        t = Date.new(year, month, 1)
        valid_mday = self.day.field_arr
        valid_wday = self.weekday.field_arr

        result = []
        while t.month == month
            result << t.mday if valid_mday.include?(t.mday) && valid_wday.include?(t.wday)
            t = t.succ
        end

        result.uniq.sort
    end

    def nudge_year(t)
        t.year = t.year + 1
    end

    def nudge_month(t, can_nudge_date=false)
        orin_month = t.month
        field_arr = self.month.field_arr
        next_value = find_best_next(t.month, field_arr)

        t.month = next_value || field_arr.first
        nudge_year(t) if next_value.nil?

        # we changed the month, so its likely that the date is incorrect now
        nudge_date(t) if can_nudge_date && orin_month != t.month
    end

    def nudge_date(t)
        field_arr = interpolate_weekdays(t.year, t.month)
        next_value = find_best_next(t.day, field_arr)

        t.day = next_value || field_arr.first || t.day
        nudge_month(t, true) if next_value.nil?
    end

    def nudge_hour(t)
        field_arr = self.hour.field_arr
        next_value = find_best_next(t.hour, field_arr)

        t.hour = next_value || field_arr.first
        nudge_date(t) if next_value.nil?
    end

    def nudge_minute(t)
        field_arr = self.minute.field_arr
        next_value = find_best_next(t.min, field_arr)

        t.min = next_value || field_arr.first
        nudge_hour(t) if next_value.nil?
    end

    # returns the smallest element from allowed which is greater than current
    # returns nil if no matching value was found
    def find_best_next(current, allowed)
        allowed.sort.find { |val| val > current }
    end
end

class CommandHandler
    include REXML

    def ignore_options
        options = []
        options << :trigger
        options
    end
    private :ignore_options

    def crontab_parser
        @parser ||= CrontabParser.new(@trigger)
    end
    private :crontab_parser

    [:minute, :hour, :day, :month, :weekday].each do |param|
        define_method("#{param}_handler") { crontab_parser.send("#{param}") }
    end

    def validate_handler
        crontab_parser
        return "success"
    end

    def next_run_time_handler
        crontab_parser.next
    end

    def inspect_handler
        "#{crontab_parser.minute} #{crontab_parser.hour} #{crontab_parser.day} #{crontab_parser.month} #{crontab_parser.weekday}"
    end

    def handle(options)
        options = options.nil? ? {} : options
        xml = Element.new('result')
        begin
            @trigger = options[:trigger]
            raise ArgumentError, "trigger is not specified" if @trigger.nil?
            options.each do |key, value|
                next if ignore_options.include?(key)
                handler = "#{key}_handler"
                raise ArgumentError, "no handler for #{key}" unless self.respond_to?(handler)
                result = nil
                if value == true # this is a flag
                    result = self.send(handler)
                else # this is a option with value
                    result = self.send(handler, value)
                end
                xml.add_element("#{key}").add_text("#{result}")
            end # end of options each
            xml.attributes['status'] = "ok"
        rescue Exception => err
            xml.attributes['status'] = "error"
            case err
            when InvalidCrontabError
                xml.add_element("message").add_text("#{err.message}")
            else
                detail = err.backtrace.join("\n")
                xml.add_element("message").add_text("Internal error")
                xml.add_element("detail").add_text("#{err.message}\n#{detail}")
            end
        end
        xml
    end
end

def parse_args(argv)
    options = {}

    option_parser = OptionParser.new
    glb_help_msg = "This script is able to validate crontab and calc next run time\n"
  
    option_parser.banner = glb_help_msg # Global help message
    option_parser.separator ""
    option_parser.separator "Specific options:"

    option_parser.on('--validate', 'only do the validation') do
        options[:validate] = true
    end

    option_parser.on('--next-run-time', 'show next run time') do
        options[:next_run_time] = true
    end

    option_parser.on('--inspect', 'show trigger') do
        options[:inspect] = true
    end
    option_parser.on('--minute', 'show minute part of the trigger') do
        options[:minute] = true
    end
    option_parser.on('--hour', 'show hour part of the trigger') do
        options[:hour] = true
    end
    option_parser.on('--day', 'show day part of the trigger') do
        options[:day] = true
    end
    option_parser.on('--month', 'show month part of the trigger') do
        options[:month] = true
    end
    option_parser.on('--weekday', 'show weekday part of the trigger') do
        options[:weekday] = true
    end

    option_parser.on('--trigger=TRIGGER', 'the crontab trigger') do |value|
        options[:trigger] = value
    end

    option_parser.separator ""
    option_parser.separator "Common options:"
  
    option_parser.on('-h', '--help', 'show this help message and exit') do
        puts option_parser
        exit
    end

    option_parser.parse(argv)
    options
end

begin
    options = parse_args(ARGV)
    handler = CommandHandler.new
    puts handler.handle(options)
end
