#!/bin/bash
#=============================================================================

# Use example:
# ./spine_daily_build {workspace_path} {branch_name} {dut_name}
#                             $1              $2           $3
#                       shanghai_build     master       greece

#=============================================================================

# This script is used to do the daily build for hwmonitor. It will get
# the latest modification of branch ${branch_name} under the specified 
# workspace ${workspace_path}, then switch to shanghai6 build host to
# generate the rpm by command make. Finally, it will copy the rpm to
# the specified dut ${dut_name}, and use it to replace the original.

#=============================================================================

workspace_path=$1
branch_name=$2
dut_name=$3
user_name=`whoami`
CURDIR=$(cd $(dirname ${BASH_SOURCE[0]}); pwd)
build_server=$(cat $CURDIR/build_server)

# All of the paramters cannot be empty string, if so, exit the script.
function check_parameters {
    echo "===================begin to check parameters========================" 
    if [ "" == "$workspace_path" ] || [ "" == "$branch_name" ] || [ "" == "$dut_name" ]
    then
        echo "Please input the parameters!"
        exit 0
    fi
    echo "==================checked successfully========================"
}
 
# Check if the dut is available (the dut is reserved by yourself or is idle), if not, exit it.
function check_dut_available {
    echo "===================begin to check dut available========================"
    rinfo_message=$(rinfo | grep "^${dut_name} *[0-9]*%")
    if [ "${rinfo_message}" == "" ]
    then
         echo "The dut ${dut_name} does not exist!"
         exit 0
    elif [[ "${rinfo_message}" =~ "Reserved:" ]] && [[ "${rinfo_message}" =~ "$user_name" ]]
    then
         echo "The dut is reserved by $user_name"
         return 0
    fi
    echo -e "Only the dut is reserved by yourself, we can deploy the rpm to it, but the ${dut_name} is: \n${rinfo_message}"
    exit 0
}

# Verify if the build host can be accessed.
function verify_access {
    echo "===================begin to verify the access========================"
    /developer/$user_name/script/current/access-verified
    echo "===================verified successfully========================"
}

# Get the latest modification under the specified workspace
function pull_latest_code {
    echo "===================begin to pull the latest code========================"
    cd /developer/$user_name/${workspace_path}/unity-build/
    git pull
    remote_name=$(git remote -v | grep "fork" | grep -v "grep" | awk '{print $1}' | head -1)
    if [ $remote_name ]
    then
      echo "will pull from remote $remote_name"
      git pull $remote_name
    fi    
    git checkout ${branch_name}
    current_branch=$(git branch | grep "* $branch_name")
    echo "current branch is $current_branch"
    if [ -z "$current_branch" ]
    then
      echo "failed to checkout to branch $branch_name"
      exit 0
    fi
    if [ "$current_branch" = "master" ]
    then
        git pull origin master
    else
        git pull ${remote_name} ${branch_name}
    fi
    git branch
    echo "===================pulled successfully========================"
}

# Switch to the build host, and generate rpm by make
function generate_rpm {
    echo "===================begin to generate rpm========================"
    ssh $user_name@${build_server} /developer/$user_name/script/common/generate_spine_rpm ${workspace_path}

    echo "===================generated rpm successfully========================"
}

# Generate the rpm for the latest code, and use it to replace the original
function deploy_backend_rpm {
    echo "===================begin to use the latest rpm instead of the old one========================"
    date_str=$(date "+%Y%m%d%H%M%S")
    tmp_dir="/${user_name}-tmp/${workspace_path}/spine-${date_str}/"
    ftssh node0.$dut_name mkdir -p ${tmp_dir}
    ftssh node1.$dut_name mkdir -p ${tmp_dir}
    ftscp /developer/$user_name/${workspace_path}/unity-build/unity-mgmt/platform/spine/rpm/RPMS/x86_64/spine*.rpm root@node0.${dut_name}:${tmp_dir}
    ftscp /developer/$user_name/${workspace_path}/unity-build/unity-mgmt/platform/spine/rpm/RPMS/x86_64/spine*.rpm root@node1.${dut_name}:${tmp_dir}
    ftssh node0.$dut_name rpm -ivh --force ${tmp_dir}*.rpm
    ftssh node1.$dut_name rpm -ivh --force ${tmp_dir}*.rpm
    ftscp /developer/$user_name/script/common/kill_spine root@node0.${dut_name}:/usr/bin
    ftscp /developer/$user_name/script/common/kill_spine root@node1.${dut_name}:/usr/bin
    ftssh node1.$dut_name kill_spine
    ftssh node0.$dut_name kill_spine
    ftssh node1.$dut_name rm -f /usr/bin/kill_spine
    ftssh node0.$dut_name rm -f /usr/bin/kill_spine
    echo "===================replaced successfully========================"
}

# The main function for daily build
function daily_build {
    pull_latest_code
    generate_rpm
    deploy_backend_rpm
}

check_parameters && daily_build
