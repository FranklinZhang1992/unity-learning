#!/bin/bash
#=============================================================================

# Use example:
# ./backend_daily_build {workspace_path} {branch_name} {dut_name}
#                             $1              $2           $3
#                        shanghai_build     master       greece

#=============================================================================

# This script is used to do the daily build for SMD and DOH. It will get
# the latest modification of branch ${branch_name} under the specified 
# workspace ${workspace_path}, then switch to shanghai2 build host to
# generate the rpm by command make. Finally, it will copy the rpm to
# the specified dut ${dut_name}, and use it to replace the original.

#=============================================================================

workspace_path=$1
branch_name=$2
dut_name=$3

# All of the paramters cannot be empty string, if so, exit the script.
function check_parameters {
    echo "===================begin to check parameters========================" 
    if [ "" == "$workspace_path" ] || [ "" == "$branch_name" ] || [ "" == "$dut_name" ]
    then
        echo "Please input the parameters!"
        exit 0
    fi
    echo "==================checked successfully========================"
}
 
# Check if the dut is available (the dut is reserved by hwu or is idle), if not, exit it.
function check_dut_available {
    echo "===================begin to check dut available========================"
    rinfo_message=$(rinfo | grep "^${dut_name} *[0-9]*%")
    if [ "${rinfo_message}" == "" ]
    then
         echo "The dut ${dut_name} does not exist!"
         exit 0
    elif [[ "${rinfo_message}" =~ "Reserved:" ]] && [[ "${rinfo_message}" =~ "hwu" ]]
    then
         echo "The dut is reserved by hwu"
         return 0
    fi
    echo -e "Only the dut is reserved by hwu, we can deploy the rpm to it, but the ${dut_name} is: \n${rinfo_message}"
    exit 0
}

# Verify if the shanghai2 build host can be accessed.
function verify_access {
    echo "===================begin to verify the access========================"
    /developer/jsong/script/centos7.1/access-verified
    echo "===================verified successfully========================"
}

# Get the latest modification under the specified workspace
function pull_latest_code {
    echo "===================begin to pull the latest code========================"
    cd /developer/jsong/${workspace_path}/unity-build/
    git pull
    git checkout ${branch_name}
    git pull git@github.com:stratus-everrun-js/unity-stratus.git ${branch_name}
    echo "===================pulled successfully========================"
}

# Switch the shangehai2 build host, and generatem by make
function generate_rpm {
    echo "===================begin to generate rpm========================"
    ssh jsong@shanghai5.sn.stratus.com /developer/jsong/script/common/generate_backend_rpm ${workspace_path}
    echo "===================generated rpm successfully========================"
}

# Generate the rpm for the latest code, and use it to replace the original
function deploy_backend_rpm {
    echo "===================begin to use the latest rpm instead of the old one========================"
    date_str=$(date "+%Y%m%d%H%M%S")
    tmp_dir="/jsong-tmp/${workspace_path}/sm-${date_str}/"
    ftssh $dut_name mkdir -p ${tmp_dir}
    ftscp /developer/jsong/${workspace_path}/unity-build/unity-mgmt/sm/rpm/RPMS/x86_64/sm*.rpm root@${dut_name}:${tmp_dir}
    ftscp /developer/jsong/shanghai_build/unity-build/unity-mgmt/sm/java/yak/rpm/RPMS/x86_64/avcli*.rpm root@${dut_name}:${tmp_dir}
    ftssh $dut_name service --status-all | grep smd
    ftssh $dut_name rpm -i --force ${tmp_dir}sm*.rpm
    ftssh $dut_name rpm -i --force ${tmp_dir}avcli*.rpm
    ftssh $dut_name service smd restart
    ftssh $dut_name service doh restart
    echo "===================replaced successfully========================"
}

# The main function for daily build
function daily_build {
    pull_latest_code
    generate_rpm
    deploy_backend_rpm
}

check_parameters && check_dut_available && verify_access && daily_build
