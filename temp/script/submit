#!/usr/bin/ruby

#=============================================================================

# This script is used to submit modified scripts to betsy, do not run this
# script on betsy
# Usage example:
# ./submit         # Submit modified files
# ./submit true    # Sublit all files to server. The existing files on server
#                  # will be overwritten
#=============================================================================

require 'pathname'

OVERWRITE = ARGV.shift
CURRENT_PATH = Pathname.new(File.dirname(__FILE__)).realpath
TARGET_PATH = "/developer"
USER = "fzhang"
SERVER = "betsy.sn.stratus.com"
REPO = "script-new"
TIMESTAMP_FILE_NAME = "timestamp"

class CommandError < RuntimeError ; end

def exec_cmd(cmd, report_error=true)
    puts cmd
    output = %x{#{cmd} 2>&1}
    raise CommandError, "#{output}" unless $?.success? || report_error == false
    output
end

def local_timestamp() $LOCAL_TIMESTAMP ||= IO.read(File.join(CURRENT_PATH, TIMESTAMP_FILE_NAME)).strip.to_i rescue 0 end
def server_timestamp() $SERVER_TIMESTAMP ||= exec_cmd("ssh #{USER}@#{SERVER} cat #{File.join(TARGET_PATH, USER, REPO, TIMESTAMP_FILE_NAME)}").to_i rescue raise end

def submit_all(local_path, server_path)
    timestamp_file = File.join(TARGET_PATH, USER, REPO, TIMESTAMP_FILE_NAME)
    raise CommandError, "Your local source is not up to date, need pull lastest scripts from server" if server_timestamp > local_timestamp
    exec_cmd("scp -r #{local_path} #{USER}@#{SERVER}:#{server_path}")
end

def submit_single_delta(local_path, server_path)
    if File.file?(local_path)
        file_mtime = File.mtime(local_path).to_i
        exec_cmd("scp #{local_path} #{USER}@#{SERVER}:#{server_path}") if file_mtime > server_timestamp
    end
end

def submit_delta(local_path, server_path)
    raise CommandError, "This is possbility the first push, use ./submit true instead" if server_timestamp == 0
    if File.directory?(local_path)
        server_path = File.join(server_path, File.basename(local_path))
        Dir.glob(File.join(local_path, "*")).each do |file|
            submit_single_delta(file, server_path)
        end
    else
        submit_single_delta(local_path, server_path)
    end
end

def submit(overwrite=false)
    ["submit", TIMESTAMP_FILE_NAME, "assist_shells", "common", "lib", "master", "release7.5"].each do |file|
        server_path = File.join(TARGET_PATH, USER, REPO)
        local_path = File.join(CURRENT_PATH, file)
        next unless File.exist?(local_path)
        if overwrite
            submit_all(local_path, server_path)
        else
            submit_delta(local_path, server_path)
        end
    end
end

def update_timestamp
    local_path = File.join(CURRENT_PATH, TIMESTAMP_FILE_NAME)
    server_path = File.join(TARGET_PATH, USER, REPO)
    %x{echo #{Time.now.to_i} > #{local_path}}
    %x{scp #{local_path} #{USER}@#{SERVER}:#{server_path}}
end

begin
    overwrite = OVERWRITE == "true" ? true : false
    submit(overwrite)
    update_timestamp
rescue CommandError => err
    puts "#{err}"
rescue Exception => err
    puts "#{err} (#{err.class})\n#{err.backtrace.join("\n\tfrom ")}"
end
